{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to eraXplor","text":"<p>AWS Cost Export Tool for automated cost reporting and analysis.</p> <p>eraXplor is an automated AWS cost reporting tool designed for assest DevOps and FinOps teams fetching and sorting AWS Cost Explorer. it extracts detailed cost data by calling AWS Cost Explorer API directly and Transform result as a CSV. <code>eraXplor</code> gives you the ability to sort the cost by Account or even By Service, as well as format and separate the result Monthly.</p> <p><code>eraXplor</code> is still under enhancement and this is an 'Initial Model'</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\u2705 Account-Level Cost Breakdown: Monthly unblended costs per linked account.</li> <li>\u2705 Service-Level Cost Breakdown: Monthly unblended costs per Services.</li> <li>\u2705 Flexible Date Ranges: Custom start/end dates with validation.</li> <li>\u2705 Multi-Profile Support: Works with all configured AWS profiles.</li> <li>\u2705 CSV Export: Ready-to-analyze reports in CSV format.</li> <li>\u2705 Cross-platform CLI Interface: Simple terminal-based workflow, and Cross OS platform.</li> <li>\u2705 Documentation Ready: Well explained documentations assest you kick start rapidly.</li> <li>\u2705 Open-Source: the tool is open-source under Apache02 and GNU licenses, which enables your to enhance it for your purpose.</li> </ul>"},{"location":"#why-eraxplor","title":"Why eraXplor?","text":"<pre><code>graph LR\n    A[AWS Console] --&gt;|Complex UI| B[Manual Export]\n    B --&gt; C[Spreadsheet Manipulation]\n    D[eraXplor] --&gt;|Automated| E[Standardized Reports]\n    style D fill:#4CAF50,stroke:#388E3C\n</code></pre>"},{"location":"#table-of-contents","title":"Table Of Contents","text":"<p>Quickly find what you're looking for depending on your use case by looking at the different pages.</p> <ol> <li>Tutorials</li> <li>How-To Guides</li> <li>Reference</li> <li>Explanation</li> </ol>"},{"location":"#about-the-author","title":"About the Author","text":"Show/Hide Author Details <p>Mohamed eraki Cloud &amp; DevOps Engineer</p> <p> </p>"},{"location":"#project-philosophy","title":"Project Philosophy","text":"<p>\"I built eraXplor to solve real-world cloud cost visibility challenges \u2014 the same pain points I encounter daily in enterprise environments. This tool embodies my belief that financial accountability should be accessible to every technical team.\"</p>"},{"location":"explanation/","title":"Explanation","text":""},{"location":"explanation/#understanding-aws-cost-visibility-challenges","title":"Understanding AWS Cost Visibility Challenges","text":"<p>In big Architectural designs, AWS Cloud Architects tend to segregate resources via multi AWS Accounts environment/Landing Zone environment.</p> <p>Manual Cost visibility, comparison, and Reconciliation, versus these multi accounts, become overwhelming as we go. based on how many accounts you have and months you wanna compare.</p> <p>Even in a tiny Architectural design, Manual Comparing the current cost of all consumied Services agianest the months before, become overwheming, based on the how many services you consiume and months you intend to compare.</p>"},{"location":"explanation/#how-eraxplor-addresses-these-challenges","title":"How eraXplor Addresses These Challenges","text":"<p><code>eraXplor</code> is a CLI tool deliver an automatic way to aggregate cost data based on user inputs and export these data into CSV format.</p> <ul> <li>Aggregate cost data per AWS Accounts.</li> <li>Aggregate cost data per AWS Services.</li> <li>Export data in reports, CVS format. </li> <li>Suport AWS profile Credintials.</li> <li>Cross-platform CLI interface.</li> </ul>"},{"location":"explanation/#key-features","title":"Key Features","text":"<ul> <li>\u2705 Account-Level Cost Breakdown: Monthly unblended costs per linked account.</li> <li>\u2705 Service-Level Cost Breakdown: Monthly unblended costs per Services.</li> <li>\u2705 Flexible Date Ranges: Custom start/end dates with validation.</li> <li>\u2705 Multi-Profile Support: Works with all configured AWS profiles.</li> <li>\u2705 CSV Export: Ready-to-analyze reports in CSV format.</li> <li>\u2705 Cross-platform CLI Interface: Simple terminal-based workflow, and Cross OS plateform.</li> <li>\u2705 Documentation Ready: Well explained documentations assest you kick start rapidly.</li> <li>\u2705 Open-Source: the tool is open-source under Apache02 and GNU licenses, which enables your to enhance it for your purpose.</li> </ul>"},{"location":"explanation/#why-eraxplor","title":"Why eraXplor?","text":"<pre><code>graph LR\n    A[AWS Console] --&gt;|Complex UI| B[Manual Export]\n    B --&gt; C[Spreadsheet Manipulation]\n    D[eraXplor] --&gt;|Automated| E[Standardized Reports]\n    style D fill:#4CAF50,stroke:#388E3C\n</code></pre>"},{"location":"how-to-guides/","title":"How-To Guides","text":""},{"location":"how-to-guides/#aws-profile-configuration","title":"AWS Profile Configuration","text":"<ul> <li>Install AWS CLI - Command line tool.</li> <li>Create an AWS AMI user then extract Access ID &amp; key.</li> <li>Configure AWS CLI profile by:</li> </ul> <pre><code>aws configure --profile [PROFILE_NAME]  # Replace [PROFILE_NAME] with your profile name\n# 2- Input the Access ID &amp; Key as required.\n# 3- Specify the defalut region.\n</code></pre>"},{"location":"how-to-guides/#check-installed-python-version","title":"Check installed Python version","text":"<ul> <li>Ensure you Python version is &gt;= 3.12.3 by:</li> </ul> <pre><code>python --version\n\n# Consider update Python version if less than 3\n</code></pre>"},{"location":"how-to-guides/#install-eraxplor","title":"Install eraXplor","text":"<ul> <li>Install eraxplor too by:</li> </ul> <pre><code>pip install eraXplor\n</code></pre>"},{"location":"how-to-guides/#how-to-use","title":"How-To use","text":"<ul> <li>Simply run the <code>eraXplor</code> Command, Then follow the prompet interactive session with valid inputs:</li> </ul> <pre><code>eraXplor\n\n# Enter a start date value with YYYY-MM-DD format: 2025-1-1\n# Enter an end date value with YYYY-MM-DD format: 2025-3-30\n# Enter your AWS Profile name: profile_name\n# Enter the cost group by key:\n#     Enter [1] to list by 'LINKED_ACCOUNT' -&gt; Default\n#     Enter [2] to list by 'SERVICE'\n#     Enter [3] to list by 'PURCHASE_TYPE'\n#     Enter [4] to list by 'USAGE_TYPE'\n#     Press Enter for 'LINKED_ACCOUNT' -&gt; Default:\n\n# Press Enter for list cost per account, Or Enter a number for attending result.\n</code></pre> <ul> <li>Check CSV file Created.</li> </ul>"},{"location":"how-to-guides/#upcomming-features","title":"Upcomming Features","text":"<ul> <li>Parse args with non-interactive sessions.</li> <li>Rich speadsheets content and charts.</li> <li>Fetch the top 10 most expensive services.</li> </ul>"},{"location":"reference/","title":"Reference","text":"<p>This section provides a structured breakdown of the main application module and its supporting utilities used in the <code>eraXplor</code> project.</p> <p>\ud83c\udf1f</p>"},{"location":"reference/#main-application-module","title":"\ud83d\udd39Main Application Module","text":""},{"location":"reference/#entry-point","title":"\u25b6\ufe0f Entry Point","text":"<p>eraXplor - AWS Cost Export Tool</p> <p>This is the main entry point for the eraXplor CLI tool, which allows users to export AWS cost and usage data using AWS Cost Explorer.</p> <p>It provides an interactive command-line workflow to: 1. Prompt the user for a date range (start and end dates). 2. Prompt for an AWS CLI profile to authenticate with. 3. Allow the user to select a cost grouping dimension (e.g., by account, service,     Purchase type, Usage type.) 4. Fetch cost data using the AWS Cost Explorer API. 5. Export the resulting data to a CSV file.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; eraXplor\nEnter a start date value with YYYY-MM-DD format: 2025-1-1\nEnter a end date value with YYYY-MM-DD format: 2025-3-30\nEnter your AWS Profile name:  [Profile name]\nEnter the cost group by key:\n    Enter [1] to list by 'LINKED_ACCOUNT' -&gt; Default\n    Enter [2] to list by 'SERVICE'\n    Enter [3] to list by 'PURCHASE_TYPE'\n    Enter [4] to list by 'USAGE_TYPE'\n    Press Enter for 'LINKED_ACCOUNT' -&gt; Default:\n</code></pre> <p>\u2705 Data exported to test_output.csv</p> <p>This is the primary script responsible for orchestrating the user workflow. It handles user input, invokes AWS cost data retrieval, and manages data export functionality.</p>"},{"location":"reference/#eraXplor.__main__.main","title":"<code>main()</code>","text":"<p>Orchestrates &amp; Manage depends of cost export workflow.</p> Source code in <code>src/eraXplor/__main__.py</code> <pre><code>def main() -&gt; None:\n    \"\"\"Orchestrates &amp; Manage depends of cost export workflow.\"\"\"\n    # Banner\n    banner_format, copyright_notice = generate_banner()\n    print(f\"\\n\\n {termcolor.colored(banner_format, color=\"green\")}\")\n    print(f\"{termcolor.colored(copyright_notice, color=\"green\")}\", end=\"\\n\\n\")\n\n    # Prompt user for input\n    start_date_input = get_start_date_from_user()\n    end_date_input = get_end_date_from_user()\n\n    # Prompt for AWS profile name\n    aws_profile_name_input = input(\"Enter your AWS Profile name: \")\n\n    # Prompt for cost group by key\n    cost_groupby_key_input = get_cost_groupby_key()\n\n    # Fetch monthly account cost usage\n    fetch_monthly_account_cost_usage = monthly_account_cost_export(\n        start_date_input, end_date_input,\n        aws_profile_name_input,\n        cost_groupby_key_input)\n\n    # Export results to CSV\n    csv_export(fetch_monthly_account_cost_usage)\n</code></pre>"},{"location":"reference/#utility-modules","title":"\ud83d\udee0 Utility Modules","text":""},{"location":"reference/#banner-utilities","title":"\ud83c\udfa8 Banner Utilities","text":"<p>Module to display a banner and copyright notice.</p> <p>Responsible for rendering styled ASCII banners and displaying copyright information used in the CLI interface.</p>"},{"location":"reference/#eraXplor.utils.banner_utils.banner","title":"<code>banner()</code>","text":"<p>Generates a banner and copyright notice for the application.</p> Source code in <code>src/eraXplor/utils/banner_utils.py</code> <pre><code>def banner():\n    \"\"\"Generates a banner and copyright notice for the application.\"\"\"\n\n    copyright_notice = \"\"\"\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551  \u00a9 2025 Mohamed eraki                            \u2551\n\u2551  mohamed-ibrahim2021@outlook.com                 \u2551\n\u2551  Version: 1.0.0                                  \u2551\n\u2551  eraXplor - AWS Cost exporter Tool               \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n    \"\"\"\n    banner_format = pyfiglet.figlet_format(\"eraXplor\", font='slant')\n    return banner_format, copyright_notice\n</code></pre>"},{"location":"reference/#cost-export-utilities","title":"\ud83d\udcca Cost Export Utilities","text":"<p>Module to retrieve AWS account cost data using AWS Cost Explorer API.</p> <p>Contains functions for retrieving cost and usage reports from AWS Cost Explorer using <code>boto3</code>, grouped by various dimensions such as:</p> <ul> <li>Linked AWS accounts</li> <li>AWS services</li> <li>Purchase types</li> <li>Usage types</li> </ul>"},{"location":"reference/#eraXplor.utils.cost_export_utils.CostRecord","title":"<code>CostRecord</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Class type annotation tool dettermining the List Schema. Type definition for a single cost record.</p> Source code in <code>src/eraXplor/utils/cost_export_utils.py</code> <pre><code>class CostRecord(TypedDict):\n    \"\"\"Class type annotation tool dettermining the List Schema.\n    Type definition for a single cost record.\n    \"\"\"\n\n    time_period: Dict[str, str]  # {'Start': str, 'End': str}\n    account_id: str\n    account_cost: str\n</code></pre>"},{"location":"reference/#eraXplor.utils.cost_export_utils.get_cost_groupby_key","title":"<code>get_cost_groupby_key()</code>","text":"<p>Iteratively prompts the user to select a cost group by key.</p> Source code in <code>src/eraXplor/utils/cost_export_utils.py</code> <pre><code>def get_cost_groupby_key():\n    \"\"\"Iteratively prompts the user to select a cost group by key.\"\"\"\n    while True:\n        try:\n            # Prompt user for input\n            cost_groupby_key_input = input(\n                \"\"\"Enter the cost group by key:\n    Enter [1] to list by 'LINKED_ACCOUNT' -&gt; Default\n    Enter [2] to list by 'SERVICE'\n    Enter [3] to list by 'PURCHASE_TYPE'\n    Enter [4] to list by 'USAGE_TYPE'\n    Press Enter for 'LINKED_ACCOUNT' -&gt; Default:\\n\"\"\"\n            ).strip()\n\n            # use default if empty\n            if cost_groupby_key_input == \"\":\n                cost_groupby_key_object = \"1\"\n                print(\"Defaulting to 'LINKED_ACCOUNT'\")\n            else:\n                cost_groupby_key_object = cost_groupby_key_input\n\n            # Ensure input is valid\n            if cost_groupby_key_object not in [\"1\", \"2\", \"3\", \"4\"]:\n                print(\"Invalid selection. Please enter [1], [2], [3] or [4].\")\n                continue\n            # Return the valid selection\n            return int(cost_groupby_key_object)\n\n        except KeyboardInterrupt:\n            print(\"\\nUser interrupted. Exiting\")\n            break\n</code></pre>"},{"location":"reference/#eraXplor.utils.cost_export_utils.monthly_account_cost_export","title":"<code>monthly_account_cost_export(start_date_input, end_date_input, aws_profile_name_input, cost_groupby_key_input=1)</code>","text":"<p>Retrieves AWS account cost data for a specified time period using AWS Cost Explorer.</p> <p>Fetches the unblended costs for all linked accounts in an AWS organization for a given date range, grouped by account ID and returned in monthly granularity.</p> <p>Parameters:</p> Name Type Description Default <code>start_date_input</code> <code>str</code> <p>The start date of the cost report in YYYY-MM-DD format.</p> required <code>end_date_input</code> <code>str</code> <p>The end date of the cost report in YYYY-MM-DD format.</p> required <code>aws_profile_name_input</code> <code>str</code> <p>The name of the AWS profile to use for authentication, as configured in the local AWS credentials file.</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>List[CostRecord]</code> <p>A list of dictionaries containing cost data, where each dictionary has: - time_period (dict): Contains 'Start' and 'End' dates for the time period - account_id (str): The AWS account ID - account_cost (str): The unblended cost amount as a string</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>If there are AWS API authorization or parameter issues</p> <code>ProfileNotFound</code> <p>If the specified AWS profile doesn't exist</p> Source code in <code>src/eraXplor/utils/cost_export_utils.py</code> <pre><code>def monthly_account_cost_export(\n    start_date_input: Union[str, datetime],  # str | datetime\n    end_date_input: Union[str, datetime],\n    aws_profile_name_input: str,\n    cost_groupby_key_input: int = 1,\n) -&gt; List[CostRecord]:\n    \"\"\"Retrieves AWS account cost data for a specified time period using AWS Cost Explorer.\n\n    Fetches the unblended costs for all linked accounts in an AWS organization for a given\n    date range, grouped by account ID and returned in monthly granularity.\n\n    Args:\n        start_date_input (str): The start date of the cost report in YYYY-MM-DD format.\n        end_date_input (str): The end date of the cost report in YYYY-MM-DD format.\n        aws_profile_name_input (str): The name of the AWS profile to use for authentication,\n            as configured in the local AWS credentials file.\n\n    Returns:\n        list: A list of dictionaries containing cost data, where each dictionary has:\n            - time_period (dict): Contains 'Start' and 'End' dates for the time period\n            - account_id (str): The AWS account ID\n            - account_cost (str): The unblended cost amount as a string\n\n    Raises:\n        botocore.exceptions.ClientError: If there are AWS API authorization or parameter issues\n        botocore.exceptions.ProfileNotFound: If the specified AWS profile doesn't exist\n    \"\"\"\n    profile_session = boto3.Session(profile_name=str(aws_profile_name_input))\n    ce_client = profile_session.client(\"ce\")\n\n    # if condition determine the type of groupby key\n    results = []\n    if cost_groupby_key_input == 1:\n        # group by account ID\n        account_cost_usage = ce_client.get_cost_and_usage(\n            TimePeriod={\"Start\": str(start_date_input), \"End\": str(end_date_input)},\n            Granularity=\"MONTHLY\",\n            Metrics=[\"UnblendedCost\"],\n            GroupBy=[  # group the result based on account ID\n                {\"Type\": \"DIMENSION\", \"Key\": \"LINKED_ACCOUNT\"}\n            ],\n        )\n        for item in account_cost_usage[\"ResultsByTime\"]:\n            time_period = item[\"TimePeriod\"]\n            for group in item[\"Groups\"]:\n                account_id = group[\"Keys\"][0]\n                account_cost = group[\"Metrics\"][\"UnblendedCost\"][\"Amount\"]\n                results.append(\n                    {\n                        \"time_period\": time_period,\n                        \"account_id\": account_id,\n                        \"account_cost\": account_cost,\n                    }\n                )\n    elif cost_groupby_key_input == 2:\n        account_cost_usage = ce_client.get_cost_and_usage(\n            TimePeriod={\"Start\": str(start_date_input), \"End\": str(end_date_input)},\n            Granularity=\"MONTHLY\",\n            Metrics=[\"UnblendedCost\"],\n            GroupBy=[  # group the result based on service\n                {\"Type\": \"DIMENSION\", \"Key\": \"SERVICE\"}\n            ],\n        )\n        for item in account_cost_usage[\"ResultsByTime\"]:\n            time_period = item[\"TimePeriod\"]\n            for group in item[\"Groups\"]:\n                service_name = group[\"Keys\"][0]\n                service_cost = group[\"Metrics\"][\"UnblendedCost\"][\"Amount\"]\n                results.append(\n                    {\n                        \"time_period\": time_period,\n                        \"service_name\": service_name,\n                        \"service_cost\": service_cost,\n                    }\n                )\n    elif cost_groupby_key_input == 3:\n        account_cost_usage = ce_client.get_cost_and_usage(\n            TimePeriod={\"Start\": str(start_date_input), \"End\": str(end_date_input)},\n            Granularity=\"MONTHLY\",\n            Metrics=[\"UnblendedCost\"],\n            GroupBy=[{\"Type\": \"DIMENSION\", \"Key\": \"PURCHASE_TYPE\"}],\n        )\n        for item in account_cost_usage[\"ResultsByTime\"]:\n            time_period = item[\"TimePeriod\"]\n            for group in item[\"Groups\"]:\n                service_name = group[\"Keys\"][0]\n                service_cost = group[\"Metrics\"][\"UnblendedCost\"][\"Amount\"]\n                results.append(\n                    {\n                        \"time_period\": time_period,\n                        \"service_name\": service_name,\n                        \"service_cost\": service_cost,\n                    }\n                )\n    elif cost_groupby_key_input == 4:\n        account_cost_usage = ce_client.get_cost_and_usage(\n            TimePeriod={\"Start\": str(start_date_input), \"End\": str(end_date_input)},\n            Granularity=\"MONTHLY\",\n            Metrics=[\"UnblendedCost\"],\n            GroupBy=[{\"Type\": \"DIMENSION\", \"Key\": \"USAGE_TYPE\"}],\n        )\n        for item in account_cost_usage[\"ResultsByTime\"]:\n            time_period = item[\"TimePeriod\"]\n            for group in item[\"Groups\"]:\n                service_name = group[\"Keys\"][0]\n                service_cost = group[\"Metrics\"][\"UnblendedCost\"][\"Amount\"]\n                results.append(\n                    {\n                        \"time_period\": time_period,\n                        \"service_name\": service_name,\n                        \"service_cost\": service_cost,\n                    }\n                )\n    return results\n</code></pre>"},{"location":"reference/#csv-export-utilities","title":"\ud83e\uddfe CSV Export Utilities","text":"<p>Module for exporting AWS cost data to CSV format.</p>"},{"location":"reference/#eraXplor.utils.csv_export_utils.csv_export","title":"<code>csv_export(results, filename='cost_repot.csv')</code>","text":"<p>Exports AWS cost data to a CSV file with standardized formatting.</p> <p>Takes the output from monthly_account_cost_export() (i.e. depends handle by main) and writes it to a CSV file with consistent column headers and proper formatting. The CSV will contain the time period, Account/Service/Purchase_type/Usage_type, and associated costs.</p> <p>Parameters:</p> Name Type Description Default <code>fetch_monthly_account_cost_usage</code> <code>list</code> <p>List of cost data dictionaries as returned by monthly_account_cost_export(). Each dictionary should contain: - time_period (dict): With 'Start' and 'End' keys - [] (str): AWS account ID | service name - account_cost (str): Cost amount as string required <code>filename</code> <code>str</code> <p>Output filename for the CSV. Defaults to 'cost_report.csv'.</p> <code>'cost_repot.csv'</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Writes directly to file but doesn't return any value.</p> Source code in <code>src/eraXplor/utils/csv_export_utils.py</code> <pre><code>def csv_export(\n    results: List[Dict[str, Any]],\n    filename: str = \"cost_repot.csv\"\n    ) -&gt; None:\n    \"\"\"Exports AWS cost data to a CSV file with standardized formatting.\n\n    Takes the output from monthly_account_cost_export() _(i.e. depends handle by main)_\n    and writes it to a CSV file with consistent column headers and proper formatting.\n    The CSV will contain the time period, Account/Service/Purchase_type/Usage_type,\n    and associated costs.\n\n    Args:\n        fetch_monthly_account_cost_usage (list): List of cost data dictionaries as returned\n            by monthly_account_cost_export(). Each dictionary should contain:\n            - time_period (dict): With 'Start' and 'End' keys\n            - [&lt;account_id | service name&gt;] (str): AWS account ID | service name\n            - account_cost (str): Cost amount as string\n        filename (str, optional): Output filename for the CSV. Defaults to 'cost_report.csv'.\n\n    Returns:\n        None: Writes directly to file but doesn't return any value.\n    \"\"\"\n    # Create a CSV file with write mode\n    with open(filename, mode=\"w\", newline=\"\", encoding=\"utf-8\") as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(\n            [\n                \"Start Date\",\n                \"End Date\",\n                \"Account/Service/Purchase_type/Usage_type\",\n                \"Cost\",\n            ]\n        )\n        for row in results:\n            time_period = row[\"time_period\"]\n            name = row.get(\"account_id\") or row.get(\"service_name\")\n            cost = row.get(\"account_cost\") or row.get(\"service_cost\")\n            writer.writerow([time_period[\"Start\"], time_period[\"End\"], name, cost])\n    print(f\"\\n\u2705 Data exported to {filename}\")\n</code></pre> <p>Provides functionality to export retrieved cost data into a structured CSV format.</p>"},{"location":"reference/#date-utilities","title":"\ud83d\udcc5 Date Utilities","text":"<p>Module providing date utility functions.</p> <p>Includes interactive functions for prompting and validating date input from users, ensuring format compliance and error handling.</p>"},{"location":"reference/#eraXplor.utils.date_utils.get_end_date_from_user","title":"<code>get_end_date_from_user()</code>","text":"<p>Prompts the user to enter an end date and validates the input format.</p> <p>Continuously prompts the user until a valid date is provided in the specified format or until the user interrupts with keyboard input. Handles both format validation and user interruption gracefully.</p> <p>Returns:</p> Type Description <p>datetime.date or None: Returns a date object if valid input is provided, returns None if the user interrupts the input (Ctrl+C).</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the input date format is invalid.</p> <code>KeyboardInterrupt</code> <p>If the user interrupts the input prompt (though this is caught and handled within the function).</p> Source code in <code>src/eraXplor/utils/date_utils.py</code> <pre><code>def get_end_date_from_user():\n    \"\"\"Prompts the user to enter an end date and validates the input format.\n\n    Continuously prompts the user until a valid date is provided in the specified\n    format or until the user interrupts with keyboard input. Handles both format\n    validation and user interruption gracefully.\n\n    Returns:\n        datetime.date or None: Returns a date object if valid input is provided,\n            returns None if the user interrupts the input (Ctrl+C).\n\n    Raises:\n        ValueError: If the input date format is invalid.\n\n        KeyboardInterrupt: If the user interrupts the input prompt (though this is\n            caught and handled within the function).\n    \"\"\"\n    while True:\n        try:\n            date_string = input(\"Enter an end date value with YYYY-MM-DD format: \")\n            date_object = datetime.strptime(date_string, \"%Y-%m-%d\").date()\n            return date_object\n        except ValueError:\n            print(\"Invalid date format, Please use YYYY-MM-DD\")\n        except KeyboardInterrupt:\n            print(\"\\nUser interrupted. Exiting\")\n            break\n    return None\n</code></pre>"},{"location":"reference/#eraXplor.utils.date_utils.get_start_date_from_user","title":"<code>get_start_date_from_user()</code>","text":"<p>Prompts the user to enter a start date and validates the input format.</p> <p>Continuously prompts the user until a valid date is provided in the specified format or until the user interrupts with keyboard input. Handles both format validation and user interruption gracefully.</p> <p>Returns:</p> Type Description <p>datetime.date or None: Returns a date object if valid input is provided, returns None if the user interrupts the input (Ctrl+C).</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the input date format is invalid.</p> <code>KeyboardInterrupt</code> <p>If the user interrupts the input prompt (though this is caught and handled within the function).</p> Source code in <code>src/eraXplor/utils/date_utils.py</code> <pre><code>def get_start_date_from_user():\n    \"\"\"Prompts the user to enter a start date and validates the input format.\n\n    Continuously prompts the user until a valid date is provided in the specified\n    format or until the user interrupts with keyboard input. Handles both format\n    validation and user interruption gracefully.\n\n    Returns:\n        datetime.date or None: Returns a date object if valid input is provided,\n            returns None if the user interrupts the input (Ctrl+C).\n\n    Raises:\n        ValueError: If the input date format is invalid.\n\n        KeyboardInterrupt: If the user interrupts the input prompt (though this is\n            caught and handled within the function).\n    \"\"\"\n    while True:\n        try:\n            date_string = input(\"Enter a start date value with YYYY-MM-DD format: \")\n            date_object = datetime.strptime(date_string, \"%Y-%m-%d\").date()\n            return date_object\n        except ValueError:\n            print(\"Invalid date format, Please use YYYY-MM-DD\")\n        except KeyboardInterrupt:\n            print(\"\\nUser interrupted. Exiting\")\n            break\n\n    return None\n</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":""},{"location":"tutorials/#1-setup-eraxplor-for-your-aws-account","title":"1. Setup eraXplor for your AWS Account","text":"<p>This tutorial walks you through setting up <code>eraXplor</code> to start exporting your AWS cost data automatically.</p>"},{"location":"tutorials/#prerequisites","title":"Prerequisites","text":"<ul> <li>AWS CLI</li> <li>Configure AWS Profile</li> <li> <p>Python version &gt;= 3.12.3</p> <p>Check that by:</p> </li> </ul> <pre><code>python3 --version\n</code></pre>"},{"location":"tutorials/#steps","title":"Steps","text":"<ol> <li>Install eraXplor:</li> </ol> <pre><code>pip install eraXplor\n</code></pre> <ol> <li>Run eraXplor:</li> </ol> <pre><code>eraXplor\n</code></pre> <p>This will prompet you with an Interactive session. Please, Follow the guide below and enter a valied inputs as follows example:</p> <pre><code>Enter a start date value with YYYY-MM-DD format: 2025-1-1\nEnter an end date value with YYYY-MM-DD format: 2025-3-30\nEnter your AWS Profile name: profile_name\nEnter the cost group by key:\n    Enter [1] to list by 'LINKED_ACCOUNT' -&gt; Default\n    Enter [2] to list by 'SERVICE'\n    Enter [3] to list by 'PURCHASE_TYPE'\n    Enter [4] to list by 'USAGE_TYPE'\n    Press Enter for 'LINKED_ACCOUNT' -&gt; Default:\n\n    # Press Enter for list cost per account, Or Enter a number for attending result.\n</code></pre>"}]}